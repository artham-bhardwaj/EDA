{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "14107e7a",
   "metadata": {
    "_cell_guid": "b1076dfc-b9ad-4769-8c92-a6c4dae69d19",
    "_uuid": "8f2839f25d086af736a60e9eeb907d3b93b6e0e5",
    "execution": {
     "iopub.execute_input": "2025-08-11T09:58:44.628139Z",
     "iopub.status.busy": "2025-08-11T09:58:44.627843Z",
     "iopub.status.idle": "2025-08-11T09:58:46.737355Z",
     "shell.execute_reply": "2025-08-11T09:58:46.736329Z"
    },
    "papermill": {
     "duration": 2.119994,
     "end_time": "2025-08-11T09:58:46.739105",
     "exception": false,
     "start_time": "2025-08-11T09:58:44.619111",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "/kaggle/input/titanic/train.csv\n",
      "/kaggle/input/titanic/test.csv\n",
      "/kaggle/input/titanic/gender_submission.csv\n"
     ]
    }
   ],
   "source": [
    "# This Python 3 environment comes with many helpful analytics libraries installed\n",
    "# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n",
    "# For example, here's several helpful packages to load\n",
    "\n",
    "import numpy as np # linear algebra\n",
    "import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n",
    "\n",
    "# Input data files are available in the read-only \"../input/\" directory\n",
    "# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n",
    "\n",
    "import os\n",
    "for dirname, _, filenames in os.walk('/kaggle/input'):\n",
    "    for filename in filenames:\n",
    "        print(os.path.join(dirname, filename))\n",
    "\n",
    "# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n",
    "# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "8c879d6b",
   "metadata": {
    "papermill": {
     "duration": 0.005944,
     "end_time": "2025-08-11T09:58:46.752760",
     "exception": false,
     "start_time": "2025-08-11T09:58:46.746816",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "# EDA on Titanic Dataset\n",
    "### Steps to be followed\n",
    "1. Load the data\n",
    "2. Understand Data Structure\n",
    "3. Check for missing values\n",
    "4. Target variable Exploration\n",
    "5. Analyzing Categorical Features\n",
    "6. Analyze Numerical Features\n",
    "7. Feature Engineering from Existing Columns\n",
    "8. Missing Value Treatment\n",
    "9. Correlation analysis\n",
    "10. Pairwise Plots and Multivariate Analysis\n",
    "11. Check for Outliers\n",
    "12. Summarize Findings"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6266298c",
   "metadata": {
    "papermill": {
     "duration": 0.005619,
     "end_time": "2025-08-11T09:58:46.764484",
     "exception": false,
     "start_time": "2025-08-11T09:58:46.758865",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 1. Load the Data\n",
    "What & Why:\n",
    "\n",
    "Load the dataset into memory.\n",
    "\n",
    "See the first few rows to get a feel for the data.\n",
    "\n",
    "Understand the columns present.\n",
    "\n",
    "Check data types and identify missing data upfront."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1fb1506f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T09:58:46.777986Z",
     "iopub.status.busy": "2025-08-11T09:58:46.777563Z",
     "iopub.status.idle": "2025-08-11T09:58:46.829360Z",
     "shell.execute_reply": "2025-08-11T09:58:46.828331Z"
    },
    "papermill": {
     "duration": 0.060842,
     "end_time": "2025-08-11T09:58:46.831305",
     "exception": false,
     "start_time": "2025-08-11T09:58:46.770463",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  \n",
       "0      0         A/5 21171   7.2500   NaN        S  \n",
       "1      0          PC 17599  71.2833   C85        C  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S  \n",
       "3      0            113803  53.1000  C123        S  \n",
       "4      0            373450   8.0500   NaN        S  "
      ]
     },
     "execution_count": 2,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd\n",
    "\n",
    "titanic = pd.read_csv('/kaggle/input/titanic/train.csv')\n",
    "titanic.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "17e5a251",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T09:58:46.845834Z",
     "iopub.status.busy": "2025-08-11T09:58:46.845465Z",
     "iopub.status.idle": "2025-08-11T09:58:46.873333Z",
     "shell.execute_reply": "2025-08-11T09:58:46.872307Z"
    },
    "papermill": {
     "duration": 0.036965,
     "end_time": "2025-08-11T09:58:46.874890",
     "exception": false,
     "start_time": "2025-08-11T09:58:46.837925",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          714 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n"
     ]
    }
   ],
   "source": [
    "titanic.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "9a8cb922",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T09:58:46.889883Z",
     "iopub.status.busy": "2025-08-11T09:58:46.888862Z",
     "iopub.status.idle": "2025-08-11T09:58:46.930802Z",
     "shell.execute_reply": "2025-08-11T09:58:46.929733Z"
    },
    "papermill": {
     "duration": 0.05088,
     "end_time": "2025-08-11T09:58:46.932436",
     "exception": false,
     "start_time": "2025-08-11T09:58:46.881556",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1458: RuntimeWarning: invalid value encountered in greater\n",
      "  has_large_values = (abs_vals > 1e6).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in less\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n",
      "/usr/local/lib/python3.11/dist-packages/pandas/io/formats/format.py:1459: RuntimeWarning: invalid value encountered in greater\n",
      "  has_small_values = ((abs_vals < 10 ** (-self.digits)) & (abs_vals > 0)).any()\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891</td>\n",
       "      <td>891</td>\n",
       "      <td>714.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>891</td>\n",
       "      <td>891.000000</td>\n",
       "      <td>204</td>\n",
       "      <td>889</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>unique</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>891</td>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>681</td>\n",
       "      <td>NaN</td>\n",
       "      <td>147</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>top</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>347082</td>\n",
       "      <td>NaN</td>\n",
       "      <td>B96 B98</td>\n",
       "      <td>S</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>freq</th>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1</td>\n",
       "      <td>577</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7</td>\n",
       "      <td>NaN</td>\n",
       "      <td>4</td>\n",
       "      <td>644</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.383838</td>\n",
       "      <td>2.308642</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>29.699118</td>\n",
       "      <td>0.523008</td>\n",
       "      <td>0.381594</td>\n",
       "      <td>NaN</td>\n",
       "      <td>32.204208</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>257.353842</td>\n",
       "      <td>0.486592</td>\n",
       "      <td>0.836071</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14.526497</td>\n",
       "      <td>1.102743</td>\n",
       "      <td>0.806057</td>\n",
       "      <td>NaN</td>\n",
       "      <td>49.693429</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.420000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>223.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>20.125000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>7.910400</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>446.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>28.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>14.454200</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>668.500000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>38.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>31.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>891.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>80.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>512.329200</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        PassengerId    Survived      Pclass                     Name   Sex  \\\n",
       "count    891.000000  891.000000  891.000000                      891   891   \n",
       "unique          NaN         NaN         NaN                      891     2   \n",
       "top             NaN         NaN         NaN  Braund, Mr. Owen Harris  male   \n",
       "freq            NaN         NaN         NaN                        1   577   \n",
       "mean     446.000000    0.383838    2.308642                      NaN   NaN   \n",
       "std      257.353842    0.486592    0.836071                      NaN   NaN   \n",
       "min        1.000000    0.000000    1.000000                      NaN   NaN   \n",
       "25%      223.500000    0.000000    2.000000                      NaN   NaN   \n",
       "50%      446.000000    0.000000    3.000000                      NaN   NaN   \n",
       "75%      668.500000    1.000000    3.000000                      NaN   NaN   \n",
       "max      891.000000    1.000000    3.000000                      NaN   NaN   \n",
       "\n",
       "               Age       SibSp       Parch  Ticket        Fare    Cabin  \\\n",
       "count   714.000000  891.000000  891.000000     891  891.000000      204   \n",
       "unique         NaN         NaN         NaN     681         NaN      147   \n",
       "top            NaN         NaN         NaN  347082         NaN  B96 B98   \n",
       "freq           NaN         NaN         NaN       7         NaN        4   \n",
       "mean     29.699118    0.523008    0.381594     NaN   32.204208      NaN   \n",
       "std      14.526497    1.102743    0.806057     NaN   49.693429      NaN   \n",
       "min       0.420000    0.000000    0.000000     NaN    0.000000      NaN   \n",
       "25%      20.125000    0.000000    0.000000     NaN    7.910400      NaN   \n",
       "50%      28.000000    0.000000    0.000000     NaN   14.454200      NaN   \n",
       "75%      38.000000    1.000000    0.000000     NaN   31.000000      NaN   \n",
       "max      80.000000    8.000000    6.000000     NaN  512.329200      NaN   \n",
       "\n",
       "       Embarked  \n",
       "count       889  \n",
       "unique        3  \n",
       "top           S  \n",
       "freq        644  \n",
       "mean        NaN  \n",
       "std         NaN  \n",
       "min         NaN  \n",
       "25%         NaN  \n",
       "50%         NaN  \n",
       "75%         NaN  \n",
       "max         NaN  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic.describe(include='all')"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "01b47583",
   "metadata": {
    "papermill": {
     "duration": 0.006429,
     "end_time": "2025-08-11T09:58:46.946584",
     "exception": false,
     "start_time": "2025-08-11T09:58:46.940155",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "## 2. Understand the Datastructure\n",
    "What & Why:\n",
    "\n",
    "We want to know:\n",
    "\n",
    "Column names and meanings\n",
    "\n",
    "Data types (numeric, categorical, text)\n",
    "\n",
    "How many entries (rows) and features (columns)\n",
    "\n",
    "Which columns are identifiers (not useful for ML)\n",
    "\n",
    "### What to Look For:\n",
    "PassengerId: Unique identifier, not useful for prediction.\n",
    "\n",
    "Survived: Target variable (0 = Died, 1 = Survived).\n",
    "\n",
    "Pclass, Sex, Embarked: Categorical features.\n",
    "\n",
    "Age, Fare: Continuous numerical features.\n",
    "\n",
    "SibSp, Parch: Discrete numerical features.\n",
    "\n",
    "Name, Ticket, Cabin: Text/string data (can be transformed into new features)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "948632c2",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T09:58:46.961692Z",
     "iopub.status.busy": "2025-08-11T09:58:46.961334Z",
     "iopub.status.idle": "2025-08-11T09:58:46.967270Z",
     "shell.execute_reply": "2025-08-11T09:58:46.966486Z"
    },
    "papermill": {
     "duration": 0.014925,
     "end_time": "2025-08-11T09:58:46.968699",
     "exception": false,
     "start_time": "2025-08-11T09:58:46.953774",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n",
       "       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "3cd8588b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T09:58:46.983853Z",
     "iopub.status.busy": "2025-08-11T09:58:46.983474Z",
     "iopub.status.idle": "2025-08-11T09:58:46.993940Z",
     "shell.execute_reply": "2025-08-11T09:58:46.993010Z"
    },
    "papermill": {
     "duration": 0.019554,
     "end_time": "2025-08-11T09:58:46.995352",
     "exception": false,
     "start_time": "2025-08-11T09:58:46.975798",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 891 entries, 0 to 890\n",
      "Data columns (total 12 columns):\n",
      " #   Column       Non-Null Count  Dtype  \n",
      "---  ------       --------------  -----  \n",
      " 0   PassengerId  891 non-null    int64  \n",
      " 1   Survived     891 non-null    int64  \n",
      " 2   Pclass       891 non-null    int64  \n",
      " 3   Name         891 non-null    object \n",
      " 4   Sex          891 non-null    object \n",
      " 5   Age          714 non-null    float64\n",
      " 6   SibSp        891 non-null    int64  \n",
      " 7   Parch        891 non-null    int64  \n",
      " 8   Ticket       891 non-null    object \n",
      " 9   Fare         891 non-null    float64\n",
      " 10  Cabin        204 non-null    object \n",
      " 11  Embarked     889 non-null    object \n",
      "dtypes: float64(2), int64(5), object(5)\n",
      "memory usage: 83.7+ KB\n"
     ]
    }
   ],
   "source": [
    "titanic.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "9511a649",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T09:58:47.011011Z",
     "iopub.status.busy": "2025-08-11T09:58:47.010724Z",
     "iopub.status.idle": "2025-08-11T09:58:47.016819Z",
     "shell.execute_reply": "2025-08-11T09:58:47.015768Z"
    },
    "papermill": {
     "duration": 0.015413,
     "end_time": "2025-08-11T09:58:47.018294",
     "exception": false,
     "start_time": "2025-08-11T09:58:47.002881",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(891, 12)"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# number of rows and columns\n",
    "titanic.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7ec96e3a",
   "metadata": {
    "papermill": {
     "duration": 0.00691,
     "end_time": "2025-08-11T09:58:47.032585",
     "exception": false,
     "start_time": "2025-08-11T09:58:47.025675",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 3. Handling Missing Values\n",
    "#### What & Why\n",
    "Missing data can:\n",
    "\n",
    "Introduce bias if ignored.\n",
    "\n",
    "Reduce accuracy if not handled properly.\n",
    "\n",
    "Sometimes carry meaning (e.g., missing Cabin → lower-class passenger).\n",
    "\n",
    "We’ll:\n",
    "\n",
    "Count missing values.\n",
    "\n",
    "Calculate the percentage of missing values.\n",
    "\n",
    "Decide how to handle them in Step 8: Missing Value Treatment.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "e9f2b879",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T09:58:47.049535Z",
     "iopub.status.busy": "2025-08-11T09:58:47.049167Z",
     "iopub.status.idle": "2025-08-11T09:58:47.054782Z",
     "shell.execute_reply": "2025-08-11T09:58:47.053853Z"
    },
    "papermill": {
     "duration": 0.015682,
     "end_time": "2025-08-11T09:58:47.056279",
     "exception": false,
     "start_time": "2025-08-11T09:58:47.040597",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# number of missing values\n",
    "missing = titanic.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "6b5e2a6d",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T09:58:47.071506Z",
     "iopub.status.busy": "2025-08-11T09:58:47.071161Z",
     "iopub.status.idle": "2025-08-11T09:58:47.077360Z",
     "shell.execute_reply": "2025-08-11T09:58:47.076254Z"
    },
    "papermill": {
     "duration": 0.015481,
     "end_time": "2025-08-11T09:58:47.078847",
     "exception": false,
     "start_time": "2025-08-11T09:58:47.063366",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "PassengerId     0.000000\n",
      "Survived        0.000000\n",
      "Pclass          0.000000\n",
      "Name            0.000000\n",
      "Sex             0.000000\n",
      "Age            19.865320\n",
      "SibSp           0.000000\n",
      "Parch           0.000000\n",
      "Ticket          0.000000\n",
      "Fare            0.000000\n",
      "Cabin          77.104377\n",
      "Embarked        0.224467\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "#precentage missing\n",
    "miss_percent = missing/len(titanic)*100\n",
    "print(miss_percent)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "9cc53b3a",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T09:58:47.094849Z",
     "iopub.status.busy": "2025-08-11T09:58:47.094527Z",
     "iopub.status.idle": "2025-08-11T09:58:47.104817Z",
     "shell.execute_reply": "2025-08-11T09:58:47.103900Z"
    },
    "papermill": {
     "duration": 0.019588,
     "end_time": "2025-08-11T09:58:47.106288",
     "exception": false,
     "start_time": "2025-08-11T09:58:47.086700",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "             Missing Values  Missing percenatage(%)\n",
      "Cabin                   687               77.104377\n",
      "Age                     177               19.865320\n",
      "Embarked                  2                0.224467\n",
      "PassengerId               0                0.000000\n",
      "Survived                  0                0.000000\n",
      "Pclass                    0                0.000000\n",
      "Name                      0                0.000000\n",
      "Sex                       0                0.000000\n",
      "SibSp                     0                0.000000\n",
      "Parch                     0                0.000000\n",
      "Ticket                    0                0.000000\n",
      "Fare                      0                0.000000\n"
     ]
    }
   ],
   "source": [
    "# Combining missing counts per column and missing Percentage into seperate datafrake\n",
    "miss_df = pd.DataFrame(\n",
    "    {\n",
    "        'Missing Values': missing,\n",
    "        'Missing percenatage(%)':miss_percent\n",
    "    }\n",
    ").sort_values(['Missing percenatage(%)'],ascending = False)\n",
    "\n",
    "print(miss_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9fb4dea0",
   "metadata": {
    "papermill": {
     "duration": 0.006899,
     "end_time": "2025-08-11T09:58:47.120369",
     "exception": false,
     "start_time": "2025-08-11T09:58:47.113470",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Observation\n",
    "77 % missing values in Cabin, too much to impute directly.\n",
    "\n",
    "20 % missing values in Age, can be imputed.\n",
    "\n",
    "0.2 % missing values in Embarked, can be imputed with Mode."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1eb66a6a",
   "metadata": {
    "papermill": {
     "duration": 0.007106,
     "end_time": "2025-08-11T09:58:47.134622",
     "exception": false,
     "start_time": "2025-08-11T09:58:47.127516",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### Handling Missing Values Plan\n",
    "#### 1. Cabin (77% )\n",
    "* Too much missing\n",
    "* Create a new binary feature CabinKnown( 1 if cabin info is present , otherwise 0) - survival rates differ by this."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "249b1b02",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T09:58:47.150257Z",
     "iopub.status.busy": "2025-08-11T09:58:47.149992Z",
     "iopub.status.idle": "2025-08-11T09:58:47.164822Z",
     "shell.execute_reply": "2025-08-11T09:58:47.163683Z"
    },
    "papermill": {
     "duration": 0.024747,
     "end_time": "2025-08-11T09:58:47.166329",
     "exception": false,
     "start_time": "2025-08-11T09:58:47.141582",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>CabinKnown</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  CabinKnown  \n",
       "0      0         A/5 21171   7.2500   NaN        S           0  \n",
       "1      0          PC 17599  71.2833   C85        C           1  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S           0  \n",
       "3      0            113803  53.1000  C123        S           1  \n",
       "4      0            373450   8.0500   NaN        S           0  "
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic['CabinKnown'] = titanic['Cabin'].notnull().astype(int)\n",
    "titanic.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ca59bee0",
   "metadata": {
    "papermill": {
     "duration": 0.006835,
     "end_time": "2025-08-11T09:58:47.180605",
     "exception": false,
     "start_time": "2025-08-11T09:58:47.173770",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### 2. Age(20%)\n",
    "* Important for survival analysis ( children had higher survival)\n",
    "* Missingness could be random-> Best impute using median age groupedBy Passanger Title (mr,mrs,miss,master,etc) .\n",
    "* If missing is Mr. so median of All Mr. and so on."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "c1b2e255",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T09:58:47.196233Z",
     "iopub.status.busy": "2025-08-11T09:58:47.195974Z",
     "iopub.status.idle": "2025-08-11T09:58:47.201976Z",
     "shell.execute_reply": "2025-08-11T09:58:47.201124Z"
    },
    "papermill": {
     "duration": 0.015669,
     "end_time": "2025-08-11T09:58:47.203513",
     "exception": false,
     "start_time": "2025-08-11T09:58:47.187844",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Extract title\n",
    "titanic['Title'] = titanic['Name'].str.extract(' ([A-Za-z]+)\\.', expand = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "dad59c9b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T09:58:47.219458Z",
     "iopub.status.busy": "2025-08-11T09:58:47.219168Z",
     "iopub.status.idle": "2025-08-11T09:58:47.233007Z",
     "shell.execute_reply": "2025-08-11T09:58:47.231842Z"
    },
    "papermill": {
     "duration": 0.023854,
     "end_time": "2025-08-11T09:58:47.234845",
     "exception": false,
     "start_time": "2025-08-11T09:58:47.210991",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "# Fill Age based on median age for each title\n",
    "titanic['Age'] = titanic.groupby('Title')['Age'].transform(lambda x: x.fillna(x.median()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "af35a65f",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T09:58:47.250887Z",
     "iopub.status.busy": "2025-08-11T09:58:47.250215Z",
     "iopub.status.idle": "2025-08-11T09:58:47.264243Z",
     "shell.execute_reply": "2025-08-11T09:58:47.263335Z"
    },
    "papermill": {
     "duration": 0.0236,
     "end_time": "2025-08-11T09:58:47.265798",
     "exception": false,
     "start_time": "2025-08-11T09:58:47.242198",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>PassengerId</th>\n",
       "      <th>Survived</th>\n",
       "      <th>Pclass</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>SibSp</th>\n",
       "      <th>Parch</th>\n",
       "      <th>Ticket</th>\n",
       "      <th>Fare</th>\n",
       "      <th>Cabin</th>\n",
       "      <th>Embarked</th>\n",
       "      <th>CabinKnown</th>\n",
       "      <th>Title</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Braund, Mr. Owen Harris</td>\n",
       "      <td>male</td>\n",
       "      <td>22.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>A/5 21171</td>\n",
       "      <td>7.2500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n",
       "      <td>female</td>\n",
       "      <td>38.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>PC 17599</td>\n",
       "      <td>71.2833</td>\n",
       "      <td>C85</td>\n",
       "      <td>C</td>\n",
       "      <td>1</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>Heikkinen, Miss. Laina</td>\n",
       "      <td>female</td>\n",
       "      <td>26.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>STON/O2. 3101282</td>\n",
       "      <td>7.9250</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>Miss</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n",
       "      <td>female</td>\n",
       "      <td>35.0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>113803</td>\n",
       "      <td>53.1000</td>\n",
       "      <td>C123</td>\n",
       "      <td>S</td>\n",
       "      <td>1</td>\n",
       "      <td>Mrs</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>Allen, Mr. William Henry</td>\n",
       "      <td>male</td>\n",
       "      <td>35.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>373450</td>\n",
       "      <td>8.0500</td>\n",
       "      <td>NaN</td>\n",
       "      <td>S</td>\n",
       "      <td>0</td>\n",
       "      <td>Mr</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   PassengerId  Survived  Pclass  \\\n",
       "0            1         0       3   \n",
       "1            2         1       1   \n",
       "2            3         1       3   \n",
       "3            4         1       1   \n",
       "4            5         0       3   \n",
       "\n",
       "                                                Name     Sex   Age  SibSp  \\\n",
       "0                            Braund, Mr. Owen Harris    male  22.0      1   \n",
       "1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n",
       "2                             Heikkinen, Miss. Laina  female  26.0      0   \n",
       "3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n",
       "4                           Allen, Mr. William Henry    male  35.0      0   \n",
       "\n",
       "   Parch            Ticket     Fare Cabin Embarked  CabinKnown Title  \n",
       "0      0         A/5 21171   7.2500   NaN        S           0    Mr  \n",
       "1      0          PC 17599  71.2833   C85        C           1   Mrs  \n",
       "2      0  STON/O2. 3101282   7.9250   NaN        S           0  Miss  \n",
       "3      0            113803  53.1000  C123        S           1   Mrs  \n",
       "4      0            373450   8.0500   NaN        S           0    Mr  "
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "titanic.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1e353015",
   "metadata": {
    "papermill": {
     "duration": 0.007166,
     "end_time": "2025-08-11T09:58:47.280872",
     "exception": false,
     "start_time": "2025-08-11T09:58:47.273706",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### 3. Embarked(0.2%)\n",
    "* Small Number missing , using Mode to fill as it's categorical feature"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "b2672ef0",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T09:58:47.297084Z",
     "iopub.status.busy": "2025-08-11T09:58:47.296324Z",
     "iopub.status.idle": "2025-08-11T09:58:47.302742Z",
     "shell.execute_reply": "2025-08-11T09:58:47.301859Z"
    },
    "papermill": {
     "duration": 0.016251,
     "end_time": "2025-08-11T09:58:47.304411",
     "exception": false,
     "start_time": "2025-08-11T09:58:47.288160",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": [
    "titanic['Embarked']=titanic['Embarked'].fillna(titanic['Embarked'].mode()[0])"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2c00e375",
   "metadata": {
    "papermill": {
     "duration": 0.007311,
     "end_time": "2025-08-11T09:58:47.319394",
     "exception": false,
     "start_time": "2025-08-11T09:58:47.312083",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 4. Target Variable Exploration\n",
    "The target variable is Survived:\n",
    "\n",
    "0 → Passenger did not survive\n",
    "\n",
    "1 → Passenger survived\n",
    "\n",
    "#### Our goal here is to:\n",
    "\n",
    "Check the balance between the two classes.\n",
    "\n",
    "See if the dataset is imbalanced (important for modeling later).\n",
    "\n",
    "Visualize the survival distribution."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "986928d4",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T09:58:47.336847Z",
     "iopub.status.busy": "2025-08-11T09:58:47.336566Z",
     "iopub.status.idle": "2025-08-11T09:58:49.422295Z",
     "shell.execute_reply": "2025-08-11T09:58:49.421330Z"
    },
    "papermill": {
     "duration": 2.096627,
     "end_time": "2025-08-11T09:58:49.424579",
     "exception": false,
     "start_time": "2025-08-11T09:58:47.327952",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Survived:Survived\n",
      "0    549\n",
      "1    342\n",
      "Name: count, dtype: int64\n",
      "Percentage Survived\n",
      "0    61.616162\n",
      "1    38.383838\n",
      "Name: proportion, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "# Count values\n",
    "survival_counts = titanic['Survived'].value_counts()\n",
    "print(f'Survived:{survival_counts}')\n",
    "\n",
    "# Percentage distribution\n",
    "survival_percent = titanic['Survived'].value_counts(normalize=True)*100\n",
    "print(f'Percentage {survival_percent}')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "9f3dc474",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T09:58:49.442586Z",
     "iopub.status.busy": "2025-08-11T09:58:49.441655Z",
     "iopub.status.idle": "2025-08-11T09:58:49.767942Z",
     "shell.execute_reply": "2025-08-11T09:58:49.767066Z"
    },
    "papermill": {
     "duration": 0.336387,
     "end_time": "2025-08-11T09:58:49.769551",
     "exception": false,
     "start_time": "2025-08-11T09:58:49.433164",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Visualization\n",
    "sns.countplot(x='Survived',data= titanic, palette='Set2')\n",
    "plt.title('Survival Count')\n",
    "plt.xticks([0,1],['Did not Survive','Survived'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c45318ef",
   "metadata": {
    "papermill": {
     "duration": 0.008176,
     "end_time": "2025-08-11T09:58:49.786071",
     "exception": false,
     "start_time": "2025-08-11T09:58:49.777895",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Observation:\n",
    "* Around 61.6 % did not survive\n",
    "* Around 38.4% survived.\n",
    "* Slight class imbalance - not extreme, but survival is minority Class."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "ce82c494",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T09:58:49.803605Z",
     "iopub.status.busy": "2025-08-11T09:58:49.803258Z",
     "iopub.status.idle": "2025-08-11T09:58:49.816323Z",
     "shell.execute_reply": "2025-08-11T09:58:49.815279Z"
    },
    "papermill": {
     "duration": 0.023574,
     "end_time": "2025-08-11T09:58:49.818017",
     "exception": false,
     "start_time": "2025-08-11T09:58:49.794443",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sex\n",
      "female    74.203822\n",
      "male      18.890815\n",
      "Name: Survived, dtype: float64\n",
      "Pclass\n",
      "1    62.962963\n",
      "2    47.282609\n",
      "3    24.236253\n",
      "Name: Survived, dtype: float64\n",
      "Embarked\n",
      "C    55.357143\n",
      "Q    38.961039\n",
      "S    33.900929\n",
      "Name: Survived, dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# Survival rate by Sex\n",
    "print(titanic.groupby('Sex')['Survived'].mean()*100)\n",
    "\n",
    "# Survival by Pclass\n",
    "print(titanic.groupby('Pclass')['Survived'].mean()*100)\n",
    "\n",
    "# Survival rate by Embarked\n",
    "print(titanic.groupby('Embarked')['Survived'].mean()*100)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2f014bcf",
   "metadata": {
    "papermill": {
     "duration": 0.008216,
     "end_time": "2025-08-11T09:58:49.834267",
     "exception": false,
     "start_time": "2025-08-11T09:58:49.826051",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Observations:\n",
    "\n",
    "##### Sex:\n",
    "\n",
    "Female survival rate ~74%\n",
    "\n",
    "Male survival rate ~19%\n",
    "\n",
    "###### Pclass:\n",
    "\n",
    "1st class ~63%\n",
    "\n",
    "2nd class ~47%\n",
    "\n",
    "3rd class ~24%\n",
    "\n",
    "##### Embarked:\n",
    "\n",
    "Passengers from Cherbourg (C) had the highest survival rate (~55%).\n",
    "\n",
    "Southampton (S) lowest (~34%)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "79996979",
   "metadata": {
    "papermill": {
     "duration": 0.007566,
     "end_time": "2025-08-11T09:58:49.849846",
     "exception": false,
     "start_time": "2025-08-11T09:58:49.842280",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 5. Analyzing Categorical Features\n",
    "We’ll focus on:\n",
    "\n",
    "Sex\n",
    "\n",
    "Pclass\n",
    "\n",
    "Embarked\n",
    "\n",
    "And we’ll check survival patterns visually."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "6d61eaf3",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T09:58:49.867052Z",
     "iopub.status.busy": "2025-08-11T09:58:49.866713Z",
     "iopub.status.idle": "2025-08-11T09:58:50.025340Z",
     "shell.execute_reply": "2025-08-11T09:58:50.024491Z"
    },
    "papermill": {
     "duration": 0.168853,
     "end_time": "2025-08-11T09:58:50.026810",
     "exception": false,
     "start_time": "2025-08-11T09:58:49.857957",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Sex vs Survival \n",
    "sns.countplot(x='Sex', hue='Survived', data= titanic, palette='Set2')\n",
    "plt.title('Survival by Sex')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "39391251",
   "metadata": {
    "papermill": {
     "duration": 0.008125,
     "end_time": "2025-08-11T09:58:50.110178",
     "exception": false,
     "start_time": "2025-08-11T09:58:50.102053",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Observation:\n",
    "* Women survied more than men."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "a491beef",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T09:58:50.128586Z",
     "iopub.status.busy": "2025-08-11T09:58:50.128245Z",
     "iopub.status.idle": "2025-08-11T09:58:50.304677Z",
     "shell.execute_reply": "2025-08-11T09:58:50.303622Z"
    },
    "papermill": {
     "duration": 0.187379,
     "end_time": "2025-08-11T09:58:50.306334",
     "exception": false,
     "start_time": "2025-08-11T09:58:50.118955",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Pclass vs Survival\n",
    "sns.countplot(x='Pclass', hue='Survived', data= titanic, palette='Set3')\n",
    "plt.title('Survival by Pclass')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "856862ff",
   "metadata": {
    "papermill": {
     "duration": 0.008425,
     "end_time": "2025-08-11T09:58:50.323983",
     "exception": false,
     "start_time": "2025-08-11T09:58:50.315558",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Observation\n",
    "* First Class Passanger has slight higher chances of survival"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "3a366131",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T09:58:50.345392Z",
     "iopub.status.busy": "2025-08-11T09:58:50.345111Z",
     "iopub.status.idle": "2025-08-11T09:58:50.525681Z",
     "shell.execute_reply": "2025-08-11T09:58:50.524821Z"
    },
    "papermill": {
     "duration": 0.1944,
     "end_time": "2025-08-11T09:58:50.527144",
     "exception": false,
     "start_time": "2025-08-11T09:58:50.332744",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Embarked vs Survival\n",
    "sns.countplot(x='Embarked', hue='Survived', data=titanic, palette='Set2')\n",
    "plt.title('Survival by Port of Embarkation')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f5d87a77",
   "metadata": {
    "papermill": {
     "duration": 0.009235,
     "end_time": "2025-08-11T09:58:50.545889",
     "exception": false,
     "start_time": "2025-08-11T09:58:50.536654",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Observation\n",
    "* Passengers embarking from Cherbourg (C) had better survival rates."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "9137a25b",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T09:58:50.566362Z",
     "iopub.status.busy": "2025-08-11T09:58:50.565515Z",
     "iopub.status.idle": "2025-08-11T09:58:51.147832Z",
     "shell.execute_reply": "2025-08-11T09:58:51.146651Z"
    },
    "papermill": {
     "duration": 0.594223,
     "end_time": "2025-08-11T09:58:51.149337",
     "exception": false,
     "start_time": "2025-08-11T09:58:50.555114",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/usr/local/lib/python3.11/dist-packages/seaborn/axisgrid.py:118: UserWarning: The figure layout has changed to tight\n",
      "  self._figure.tight_layout(*args, **kwargs)\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7eb3bd791a10>"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1072.11x500 with 2 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Pclass + Sex Interaction\n",
    "sns.catplot(x='Pclass', hue='Survived', col='Sex',\n",
    "            data=titanic, kind='count', palette='Set2')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0cdf214b",
   "metadata": {
    "papermill": {
     "duration": 0.009623,
     "end_time": "2025-08-11T09:58:51.169484",
     "exception": false,
     "start_time": "2025-08-11T09:58:51.159861",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "#### Observation\n",
    "* Women in 1st class had the highest survival rate, men in 3rd class the lowest."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "7cd99a49",
   "metadata": {
    "papermill": {
     "duration": 0.009437,
     "end_time": "2025-08-11T09:58:51.188966",
     "exception": false,
     "start_time": "2025-08-11T09:58:51.179529",
     "status": "completed"
    },
    "tags": []
   },
   "source": [
    "### 6. Analyzing Numerical Features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f4946659",
   "metadata": {
    "execution": {
     "iopub.execute_input": "2025-08-11T09:55:31.645418Z",
     "iopub.status.busy": "2025-08-11T09:55:31.644783Z",
     "iopub.status.idle": "2025-08-11T09:55:31.656653Z",
     "shell.execute_reply": "2025-08-11T09:55:31.655768Z",
     "shell.execute_reply.started": "2025-08-11T09:55:31.645391Z"
    },
    "papermill": {
     "duration": 0.009408,
     "end_time": "2025-08-11T09:58:51.208138",
     "exception": false,
     "start_time": "2025-08-11T09:58:51.198730",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "38f2c18e",
   "metadata": {
    "papermill": {
     "duration": 0.009401,
     "end_time": "2025-08-11T09:58:51.227328",
     "exception": false,
     "start_time": "2025-08-11T09:58:51.217927",
     "status": "completed"
    },
    "tags": []
   },
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kaggle": {
   "accelerator": "none",
   "dataSources": [
    {
     "databundleVersionId": 26502,
     "sourceId": 3136,
     "sourceType": "competition"
    }
   ],
   "dockerImageVersionId": 31089,
   "isGpuEnabled": false,
   "isInternetEnabled": true,
   "language": "python",
   "sourceType": "notebook"
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.13"
  },
  "papermill": {
   "default_parameters": {},
   "duration": 12.428323,
   "end_time": "2025-08-11T09:58:51.958140",
   "environment_variables": {},
   "exception": null,
   "input_path": "__notebook__.ipynb",
   "output_path": "__notebook__.ipynb",
   "parameters": {},
   "start_time": "2025-08-11T09:58:39.529817",
   "version": "2.6.0"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
